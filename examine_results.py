"""Examines the augmented samples generated by the DAGAN.
"""
# import argparse
import pickle

import pandas as pd
import numpy as np
from scipy.spatial.distance import jensenshannon
from sklearn.metrics.pairwise import euclidean_distances


def load_data(dataset: str) -> pd.DataFrame:
    """Loads the augmented dataset as a pandas dataframe.
    """
    dataset_file = "{}_new.pkl".format(dataset)
    with open(dataset_file, "rb") as f:
        data = pickle.load(f)
    data_values = dict()
    data_values['X'] = [list(features) for features in data['X']]
    data_values['Y'] = data['Y'].ravel()
    data_values['Real'] = data['Real']
    df = pd.DataFrame(data_values)
    print(df.head(5))
    return df
# End of load_data()


def correlation(data: pd.DataFrame) -> np.ndarray:
    """Calculates the correlations between samples in a dataframe.
    """
    for y in np.unique(data['Y']):
        print("Y = ", y)
        data2 = data[data['Y'] == y]
        X = data2['X']
        X = np.asarray([np.asarray(x) for x in X])
        corr_matrix = np.corrcoef(X)
        real_indices = np.where(data2['Real'] == 1)
        fake_indices = np.where(data2['Real'] == 0)
        print(corr_matrix[real_indices][:,real_indices].shape)
        print(corr_matrix[fake_indices][:,fake_indices].shape)
        print(corr_matrix[real_indices][:,fake_indices].shape)
        real_real_corr = np.mean(corr_matrix[real_indices][:,real_indices])
        fake_fake_corr = np.mean(corr_matrix[fake_indices][:,fake_indices])
        real_fake_corr = np.mean(corr_matrix[real_indices][:,fake_indices])
        print("real: {} fake: {} real-fake: {}".format(real_real_corr, fake_fake_corr, real_fake_corr))
        # return corr_matrix
# End of correlation()


def euclidean(data: pd.DataFrame) -> np.ndarray:
    """Calculates the euclidean distances between samples in a dataframe.
    """
    for y in np.unique(data['Y']):
        print("Y = ", y)
        data2 = data[data['Y'] == y]
        X = data2['X']
        X = np.asarray([np.asarray(x) for x in X])
        corr_matrix = euclidean_distances(X)
        real_indices = np.where(data2['Real'] == 1)
        fake_indices = np.where(data2['Real'] == 0)
        print(corr_matrix[real_indices][:,real_indices].shape)
        print(corr_matrix[fake_indices][:,fake_indices].shape)
        print(corr_matrix[real_indices][:,fake_indices].shape)
        real_real_corr = np.mean(corr_matrix[real_indices][:,real_indices])
        fake_fake_corr = np.mean(corr_matrix[fake_indices][:,fake_indices])
        real_fake_corr = np.mean(corr_matrix[real_indices][:,fake_indices])
        print("real: {} fake: {} real-fake: {}".format(real_real_corr, fake_fake_corr, real_fake_corr))
# End of euclidean()


def jensen_shannon_similarity(sample: np.ndarray, data: np.ndarray) -> np.ndarray:
    """Calculates the jaccard similarity of a single gene with all the other genes in
    the dataset.

    Params:
        sample (np.ndarray): The gene expression data for one sample
        data (np.ndarray): The data for all genes in the dataset

    Returns:
        np.ndarray: The similarity scores between this gene and all other genes
    """
    similarities = list()
    for data_sample in data:
        print(sample)
        print(data_sample)
        similarity = 1.0 - jensenshannon(sample, data_sample)
        print(similarity)
        similarities.append(similarity)
    return np.asarray(similarities)
# End of jensen_shannon_similarity()


def jensen_shannon_matrix(data: pd.DataFrame) -> pd.DataFrame:
    """Calculates the jaccard similarities between the genes present in the dataset
    using numpy's logical operators.

    Params:
        data (pd.DataFrame): The preprocessed data, in DataFrame format

    Returns:
        pd.DataFrame: The DataFrame containing the Jaccard Similarity Coefficients
                      between genes
    """
    print("Calculating jaccard similarities")
    n_samples = data.shape[0]
    print("Number of samples in dataset: {}".format(n_samples))
    X = data['X']
    X = np.asarray([np.asarray(x) for x in X])
    shannon_matrix = np.zeros((n_samples, n_samples))
    # print_progress_bar(0, len(columns), 0)
    for i in range(X.shape[0]):
        sample = X[i]
        similarities = jensen_shannon_similarity(sample, X)
        shannon_matrix[i] = similarities
        print(shannon_matrix[i][i])
        assert shannon_matrix[i][i] == 0.0
        # print_progress_bar(index+1, len(columns), index+1)
    # print(shannon_matrix)
    real_indices = np.where(data['Real'] == 1)
    fake_indices = np.where(data['Real'] == 0)
    print(shannon_matrix[real_indices][:,real_indices].shape)
    print(shannon_matrix[fake_indices][:,fake_indices].shape)
    print(shannon_matrix[real_indices][:,fake_indices].shape)
    real_real_corr = np.mean(shannon_matrix[real_indices][:,real_indices])
    fake_fake_corr = np.mean(shannon_matrix[fake_indices][:,fake_indices])
    real_fake_corr = np.mean(shannon_matrix[real_indices][:,fake_indices])
    print("real: {} fake: {} real-fake: {}".format(real_real_corr, fake_fake_corr, real_fake_corr))
    return shannon_matrix
# End of jensen_shannon_matrix()


def calc_jaccard_similarities(data: pd.DataFrame) -> pd.DataFrame:
    """Calculates the jaccard similarities between the genes present in the dataset.

    Params:
        data (pd.DataFrame): The preprocessed data, in DataFrame format

    Returns:
        pd.DataFrame: The DataFrame containing the Jaccard Similarity Coefficients
                      between genes
    """
    print("Calculating jaccard similarities")
    n_genes = data.shape[0]
    print("Number of genes in dataset: {}".format(n_genes))
    columns = data.T.columns
    jaccard_coefficients = pd.DataFrame(np.zeros((n_genes, n_genes)), index=columns, columns=columns)
    print_progress_bar(0, len(columns), 0)
    for index, i in enumerate(columns):
        for j in columns[np.where(columns >= i)]:  # no need to recalculate old values
            jaccard_similarity = 1 - jaccard(data.T[i], data.T[j])
            jaccard_coefficients[i][j] = jaccard_similarity
            jaccard_coefficients[j][i] = jaccard_similarity  # it is symmetric
        print_progress_bar(index+1, len(columns), index+1)
    # jaccard_dataframe = pd.DataFrame(jaccard_coefficients)
    # jaccard_dataframe.columns = data.T.columns
    print(jaccard_coefficients)
    return jaccard_coefficients
# End of calc_jaccard_similarities()


def print_progress_bar(count: int, total: int, row: int):
    """Prints a progress bar.

    Source: https://gist.github.com/vladignatyev/06860ec2040cb497f0f3

    Params:
        count (int): The number of items completed
        total (int): The total number of items
        row (int): The current row being processed
    """
    bar_len = 60
    filled_len = int(round(bar_len * count / float(total)))

    percents = round(100.0 * count / float(total), 1)
    bar = '=' * filled_len + '-' * (bar_len - filled_len)

    sys.stdout.write('[%s] %s%s ...Processing Row %d/%d\r' % (bar, percents, '%', row, total))
    sys.stdout.flush()
# End of print_progress_bar()


def save_jaccard_similarities(data: pd.DataFrame, suffix: str = ""):
    """Saves the jaccard similarities to CSV in the 'long' format:
    Gene 1, Gene 2, Jaccard Similarity Coefficient

    Params:
        data (pd.DataFrame): The jaccard similarity matrix
        suffix (str): The suffix with which to save the csv file. Filename will be
                      jaccard_similarity_coefficients_{suffix}.csv
    """
    print("Saving jaccard similarities")
    long_data = pd.DataFrame(data.unstack())
    long_data.index = long_data.index.set_names(['Gene 1', 'Gene 2'])
    long_data.columns = ['Jaccard Similarity Coefficient']
    long_data.reset_index(inplace=True)
    print("Shape of long dataset: {}".format(long_data.shape))
    print("Filtering out 0 values")
    long_data = long_data.loc[long_data['Jaccard Similarity Coefficient'] > 0.0]
    print("Shape of filtered long dataset: {}".format(long_data.shape))
    long_data.to_csv("jaccard_similarity_coefficient_long_{}.csv".format(suffix))
# End of save_jaccard_similarities()


def plot_heatmap(data: pd.DataFrame, title: str, x_label: str, y_label: str):
    """Plots a heatmap of the values in the given dataframe.

    Params:
        data (pd.DataFrame): The dataframe containing the heatmap values
        title (str): The heatmap title
        x_label (str): The x-axis label
        y_label (str): The y-axis label
    """
    print("Plotting {}".format(title))
    axes = sns.heatmap(data, square=True, cmap='Spectral')
    axes.set_xlabel(x_label)
    axes.set_ylabel(y_label)
    axes.set_title(title)
    axes.get_figure().savefig("{}.png".format(title), dpi=1000)
    plt.clf()
# End of plot_heatmap()


def plot_histogram_ut(data: pd.DataFrame, title: str, x_label: str, y_label: str):
    """Plots a histogram of the data in the upper triangle of the given dataset.

    Params:
        data (pd.DataFrame): The dataframe containing the heatmap values
        title (str): The heatmap title
        x_label (str): The x-axis label
        y_label (str): The y-axis label
    """
    print("Plotting {}".format(title))
    columns = data.columns
    value_list = list()
    for i in columns:
        for j in columns[np.where(columns > i)]:  # if i = j, result is 1, so ignore
            value_list.append(data[i][j])  # it's symmetric, so ignore repeats
    plt.ticklabel_format(style='plain', axis='y') 
    axes = sns.distplot(pd.Series(value_list, name=x_label), kde=False, norm_hist=False,
                        hist_kws={'log':True})
    axes.set_title(title)
    axes.set_ylabel(y_label)
    axes.get_figure().savefig("{}.png".format(title), dpi=400)
    plt.clf()
# End of plot_histogram_ut()

if __name__ == '__main__':
    # for dataset in ["ALLAML", "colon", "GLIOMA", "leukemia", "lung_discrete", "lung",  "lymphoma", "Prostate_GE",
    #                 "TOX_171"]:
    for dataset in ["ALLAML"]:
        print("=====Dataset = {}=====".format(dataset))
        data = load_data(dataset)
        correlation(data)
        euclidean(data)
        # jensen_shannon_matrix(data)
